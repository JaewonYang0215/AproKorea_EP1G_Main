;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include "InAdc.h"
;
;#define ADC_VREF_TYPE 0x00
;
;// Read the AD conversion result
;int read_adc( BYTE adc_input )
; 0006 0009 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0006 000A   WORD temp;
; 0006 000B   int  RetVal;
; 0006 000C 
; 0006 000D   ADMUX = adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	adc_input -> Y+4
;	temp -> R16,R17
;	RetVal -> R18,R19
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0006 000E   // Delay needed for the stabilization of the ADC input voltage
; 0006 000F   delay_us(10);
;PCODE: $00000014 VOL: 0
; 0006 0010   // Start the AD conversion
; 0006 0011   ADCSRA|=0x40;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0006 0012   // Wait for the AD conversion to complete
; 0006 0013   while ((ADCSRA & 0x10)==0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0006 0014   ADCSRA |=0x10;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0006 0015 
; 0006 0016  // return ADCW;
; 0006 0017   temp  = ADCW;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0006 0018 
; 0006 0019   RetVal =  (int)(5.0f*10.0f*(float)temp/1024.0f);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0006 001A 
; 0006 001B   return RetVal;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0006 001C }
;PCODE: $0000002E VOL: 0
