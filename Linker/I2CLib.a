;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include  "I2CLib.h"
;
;BYTE I2C_WriteSeq( BYTE ChipAddr,WORD address, BYTE *Data, WORD Count )
; 0001 0006 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0007      WORD i;
; 0001 0008 
; 0001 0009 #ifdef CFG_I2C_HIGH_ADDRESS
; 0001 000A    if( address > 0x1fff)
; 0001 000B        return ERROR;
; 0001 000C #else
; 0001 000D    if( address > 0xff)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;	ChipAddr -> Y+8
;	address -> Y+6
;	*Data -> Y+4
;	Count -> Y+2
;	i -> R16,R17
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 000E        return ERROR;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 000F #endif
; 0001 0010      /* Start */
; 0001 0011      I2C_Start();
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0001 0012      /*Device Address & Write mode */
; 0001 0013      I2C_ShiftOut( (BYTE)(ChipAddr&0xff) );
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0001 0014      I2C_Ack();
;PCODE: $00000022 VOL: 0
; 0001 0015 
; 0001 0016 #ifdef CFG_I2C_HIGH_ADDRESS
; 0001 0017      I2C_ShiftOut( (address>>8)&0xff ); /* High Address */
; 0001 0018      I2C_Ack();
; 0001 0019 #endif
; 0001 001A 
; 0001 001B      I2C_ShiftOut( (BYTE)(ChipAddr&0xff) );   /* Low Address */
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 001C      I2C_Ack();
;PCODE: $00000027 VOL: 0
; 0001 001D 
; 0001 001E      for( i=0; i< Count; i++ )
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 001F      {
; 0001 0020     /* Data Read  */
; 0001 0021     I2C_ShiftOut( Data[i] );
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 0022            I2C_Ack();
;PCODE: $00000036 VOL: 0
; 0001 0023      }
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0001 0024     // I2C_Ack();
; 0001 0025 
; 0001 0026      /** bring SDA high while clock is high */
; 0001 0027      I2C_Stop();
;PCODE: $0000003C VOL: 0
; 0001 0028 
; 0001 0029      //for( i=0; i<500; i++ )
; 0001 002A            i2c_delay();        /* 10mSec delay(no test) */
;PCODE: $0000003D VOL: 0
; 0001 002B 
; 0001 002C      return OK;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 002D }
;PCODE: $00000045 VOL: 0
;
;
;BYTE I2C_Write( BYTE ChipAddr, WORD address, BYTE dat )
; 0001 0031 {
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0001 0032    //WORD i;
; 0001 0033 
; 0001 0034 #ifdef CFG_I2C_HIGH_ADDRESS
; 0001 0035    if( address > 0x1fff)
; 0001 0036        return ERROR;
; 0001 0037 #else
; 0001 0038    if( address > 0xff)
;PCODE: $00000048 VOL: 0
;	ChipAddr -> Y+3
;	address -> Y+1
;	dat -> Y+0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 0039        return ERROR;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0001 003A #endif
; 0001 003B 
; 0001 003C    I2C_Start();  // Start
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 003D 
; 0001 003E    // Device Address & Write mode
; 0001 003F    I2C_ShiftOut( ChipAddr&0xfe );
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0001 0040    I2C_Ack();
;PCODE: $00000055 VOL: 0
; 0001 0041 
; 0001 0042 #ifdef   CFG_I2C_HIGH_ADDRESS
; 0001 0043    // High Address
; 0001 0044    I2C_ShiftOut( (address>>8)&0xff );
; 0001 0045    I2C_Ack();
; 0001 0046 #endif
; 0001 0047 
; 0001 0048    // Low Address
; 0001 0049    I2C_ShiftOut( address&0xff );
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0001 004A    I2C_Ack();
;PCODE: $0000005A VOL: 0
; 0001 004B 
; 0001 004C    I2C_ShiftOut( dat );     // write data
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0001 004D    I2C_Ack();
;PCODE: $0000005D VOL: 0
; 0001 004E 
; 0001 004F    // bring SDA high while clock is high
; 0001 0050    I2C_Stop();
;PCODE: $0000005E VOL: 0
; 0001 0051 
; 0001 0052    //for( i=0; i<400; i++ )
; 0001 0053         i2c_delay();        //10mSec delay(no test)
;PCODE: $0000005F VOL: 0
; 0001 0054 
; 0001 0055    return OK;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0001 0056 }
;PCODE: $00000063 VOL: 0
;
;void i2c_delay(void)
; 0001 0059 {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0001 005A   // int i;
; 0001 005B 
; 0001 005C //   for( i=0; i<10;i++ )    //
; 0001 005D  //    for( i=0; i<2;i++ )    //
; 0001 005E 
; 0001 005F        #asm( "nop" );
;PCODE: $00000066 VOL: 0
	nop
;PCODE: $00000067 VOL: 0
; 0001 0060 }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;
;BYTE I2C_Ack(void )
; 0001 0063 {
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0001 0064      BYTE Ack;
; 0001 0065 
; 0001 0066      HIGH_SDA;
;PCODE: $0000006C VOL: 0
;	Ack -> R17
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0001 0067 
; 0001 0068      I2C_R_MODE; //DDRC.2 = 0;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0001 0069      HIGH_SCLK;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0001 006A      i2c_delay();
;PCODE: $00000073 VOL: 0
; 0001 006B      Ack = IN_SDA;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0001 006C      i2c_delay();
;PCODE: $00000077 VOL: 0
; 0001 006D      LOW_SCLK;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0001 006E 
; 0001 006F      I2C_W_MODE; //DDRC.2 = 1;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0001 0070      i2c_delay();
;PCODE: $0000007C VOL: 0
; 0001 0071 
; 0001 0072      if( Ack )
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0001 0073         return ERROR;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0001 0074 
; 0001 0075      return OK;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0001 0076 }
;PCODE: $00000086 VOL: 0
;
;BYTE I2C_OutAck( BYTE Flag  )
; 0001 0079 {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0001 007A        //BYTE Ack;
; 0001 007B 
; 0001 007C        if( Flag )    HIGH_SDA;
;PCODE: $00000089 VOL: 0
;	Flag -> Y+0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0001 007D         else        LOW_SDA;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0001 007E        /*LOW_SCLK; */
; 0001 007F 
; 0001 0080        /*i2c_delay(); */
; 0001 0081        HIGH_SCLK;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0001 0082       // Ack = IN_SDA;//ioport1&0x80;
; 0001 0083        i2c_delay();
;PCODE: $00000096 VOL: 0
; 0001 0084        LOW_SCLK;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 0085 
; 0001 0086        i2c_delay();
;PCODE: $00000099 VOL: 0
; 0001 0087 
; 0001 0088        //if( Ack )
; 0001 0089 //    return ERROR;
; 0001 008A 
; 0001 008B        return OK;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0001 008C }
;PCODE: $0000009D VOL: 0
;
;
;BYTE I2C_ReadSeq( BYTE ChipAddr,WORD address, BYTE *Data, WORD Count )
; 0001 0090 {
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0001 0091      WORD i;
; 0001 0092 
; 0001 0093 #ifdef CFG_I2C_HIGH_ADDRESS
; 0001 0094    if( address > 0x1fff)
; 0001 0095        return ERROR;
; 0001 0096 #else
; 0001 0097    if( address > 0xff)
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;	ChipAddr -> Y+8
;	address -> Y+6
;	*Data -> Y+4
;	Count -> Y+2
;	i -> R16,R17
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0001 0098        return ERROR;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0001 0099 #endif
; 0001 009A      /* Start */
; 0001 009B      I2C_Start();
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0001 009C      // Device Address & Write mod
; 0001 009D      I2C_ShiftOut( (BYTE)(ChipAddr&0xff) );
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0001 009E      I2C_Ack();
;PCODE: $000000B3 VOL: 0
; 0001 009F 
; 0001 00A0 #ifdef CFG_I2C_HIGH_ADDRESS
; 0001 00A1      // High Address
; 0001 00A2      I2C_ShiftOut( (address>>8)&0xff );
; 0001 00A3      I2C_Ack();
; 0001 00A4 #endif
; 0001 00A5      // Low Address
; 0001 00A6      I2C_ShiftOut( address&0xff );
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0001 00A7      I2C_Ack();
;PCODE: $000000B8 VOL: 0
; 0001 00A8 
; 0001 00A9      /* Start */
; 0001 00AA      I2C_Start();
;PCODE: $000000B9 VOL: 0
; 0001 00AB      /*Device Address & Read mode */
; 0001 00AC      I2C_ShiftOut( 0x01|(BYTE)(ChipAddr&0xff) );
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0001 00AD      I2C_Ack();
;PCODE: $000000BF VOL: 0
; 0001 00AE 
; 0001 00AF      for( i=0; i< Count-1; i++ )
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0001 00B0      {
; 0001 00B1      /* Data Read  */
; 0001 00B2      Data[i] = I2C_ShiftIn();
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0001 00B3            // I2C_Ack();
; 0001 00B4            I2C_OutAck( FALSE );
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0001 00B5      }
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0001 00B6       Data[i] =    I2C_ShiftIn();
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0001 00B7       I2C_OutAck( TRUE );
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0001 00B8      //I2C_Ack();
; 0001 00B9      /** bring SDA high while clock is high */
; 0001 00BA      I2C_Stop();
;PCODE: $000000E1 VOL: 0
; 0001 00BB 
; 0001 00BC      return OK;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0001 00BD }
;PCODE: $000000E9 VOL: 0
;
;BYTE I2C_Read( BYTE ChipAddr, WORD address )
; 0001 00C0 {
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0001 00C1      BYTE Dat;
; 0001 00C2 
; 0001 00C3 #ifdef CFG_I2C_HIGH_ADDRESS
; 0001 00C4    if( address > 0x1fff)
; 0001 00C5        return ERROR;
; 0001 00C6 #else
; 0001 00C7    if( address > 0xff)
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;	ChipAddr -> Y+3
;	address -> Y+1
;	Dat -> R17
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0001 00C8        return ERROR;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0001 00C9 #endif
; 0001 00CA 
; 0001 00CB      I2C_Start();   // Start
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0001 00CC 
; 0001 00CD      /*Device Address & Write mode */
; 0001 00CE      I2C_ShiftOut( (BYTE)(ChipAddr&0xff) );
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0001 00CF      I2C_Ack();
;PCODE: $000000FC VOL: 0
; 0001 00D0 
; 0001 00D1 #ifdef CFG_I2C_HIGH_ADDRESS
; 0001 00D2      // High Address
; 0001 00D3      I2C_ShiftOut( (address>>8)&0xff );
; 0001 00D4      I2C_Ack();
; 0001 00D5 #endif
; 0001 00D6 
; 0001 00D7      // Low Address
; 0001 00D8      I2C_ShiftOut( address&0xff );
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0001 00D9      I2C_Ack();
;PCODE: $00000101 VOL: 0
; 0001 00DA 
; 0001 00DB      // Start
; 0001 00DC      I2C_Start();
;PCODE: $00000102 VOL: 0
; 0001 00DD      // Device Address & Read mode
; 0001 00DE      I2C_ShiftOut( 0x01| (BYTE)(ChipAddr&0xff) );
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0001 00DF 
; 0001 00E0      I2C_Ack();
;PCODE: $00000108 VOL: 0
; 0001 00E1 
; 0001 00E2       // Data Read
; 0001 00E3       Dat = I2C_ShiftIn();
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0001 00E4       I2C_Ack();
;PCODE: $0000010B VOL: 0
; 0001 00E5 
; 0001 00E6       /** bring SDA high while clock is high */
; 0001 00E7       I2C_Stop();
;PCODE: $0000010C VOL: 0
; 0001 00E8 
; 0001 00E9      return Dat;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0001 00EA }
;PCODE: $00000112 VOL: 0
;/*
;BYTE I2C_Read( BYTE ChipAddr, WORD address )
;{
;     BYTE Dat;
;
;#ifdef CFG_I2C_HIGH_ADDRESS
;   if( address > 0x1fff)
;       return ERROR;
;#else
;   if( address > 0xff)
;       return ERROR;
;#endif
;
;     I2C_Start();   // Start
;
;     //Device Address & Write mode
;     I2C_ShiftOut(  (BYTE)((ChipAddr<<1)&0x0e) );
;     I2C_Ack();
;
;#ifdef CFG_I2C_HIGH_ADDRESS
;     // High Address
;     I2C_ShiftOut( (address>>8)&0xff );
;     I2C_Ack();
;#endif
;
;     // Low Address
;     I2C_ShiftOut( address&0xff );
;
;     I2C_Ack();
;
;     // Start
;     I2C_Start();
;
;     // Device Address & Read mode
;     I2C_ShiftOut( 0x01| (BYTE)((ChipAddr<<1)&0x0e)  );
;
;     I2C_Ack();
;
;      // Data Read
;      Dat = I2C_ShiftIn();
;
;      I2C_Ack();
;
;      // bring SDA high while clock is high
;            I2C_Stop();
;
;     return Dat;
;}
;*/
;void I2C_Start(void )
; 0001 011D {
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0001 011E       HIGH_SDA;    /* high serial data  */
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0001 011F       HIGH_SCLK;   /* high serial clock */
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0001 0120       i2c_delay();
;PCODE: $00000119 VOL: 0
; 0001 0121       LOW_SDA;     /* low  serial data */
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0001 0122       i2c_delay();
;PCODE: $0000011C VOL: 0
; 0001 0123       LOW_SCLK;    /* low  serial clock */
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0001 0124       i2c_delay();
;PCODE: $0000011F VOL: 0
; 0001 0125 }
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;
;void I2C_Stop( void )
; 0001 0128 {
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0001 0129      LOW_SCLK;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0001 012A      LOW_SDA;      /* low serial data */
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0001 012B      i2c_delay();
;PCODE: $00000128 VOL: 0
; 0001 012C      HIGH_SCLK;    /* high serial clock */
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0001 012D      i2c_delay();
;PCODE: $0000012B VOL: 0
; 0001 012E      HIGH_SDA;     /* high serial data      */
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0001 012F }
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;
;void I2C_ShiftOut( BYTE dat )
; 0001 0132 {
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0001 0133      BYTE i,temp;
; 0001 0134 
; 0001 0135      for( i=0; i<8; i++ )
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;	dat -> Y+2
;	i -> R17
;	temp -> R16
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0001 0136      {
; 0001 0137         /* right shift */
; 0001 0138         temp = dat & ( 0x80>>i );
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0001 0139 
; 0001 013A        if( temp )   HIGH_SDA;    /* high data   */
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0001 013B        else         LOW_SDA;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0001 013C        i2c_delay();
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0001 013D        HIGH_SCLK;              /* high clock   */
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0001 013E        i2c_delay();
;PCODE: $00000150 VOL: 0
; 0001 013F        LOW_SCLK;               /* low clock    */
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0001 0140        i2c_delay();
;PCODE: $00000153 VOL: 0
; 0001 0141      }
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0001 0142 }
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;
;BYTE I2C_ShiftIn( void )
; 0001 0145 {
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0001 0146      BYTE i=0,temp;
; 0001 0147      BYTE Dat=0;
; 0001 0148 
; 0001 0149      HIGH_SDA;
;PCODE: $00000162 VOL: 0
;	i -> R17
;	temp -> R16
;	Dat -> R19
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0001 014A      I2C_R_MODE;      // input mode
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0001 014B      for( i=0; i<8; i++ )
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0001 014C      {
; 0001 014D           //  HIGH_SDA;
; 0001 014E           HIGH_SCLK;         /* high serial clock    */
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0001 014F           i2c_delay();
;PCODE: $00000176 VOL: 0
; 0001 0150 
; 0001 0151           temp = IN_SDA;     // &0x80;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0001 0152           Dat |= ( temp<<(7-i) );
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0001 0153 
; 0001 0154           i2c_delay();
;PCODE: $00000180 VOL: 0
; 0001 0155           LOW_SCLK;          /* low serial clock; */
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0001 0156           i2c_delay();
;PCODE: $00000183 VOL: 0
; 0001 0157      }
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0001 0158 
; 0001 0159       I2C_W_MODE;   // output mode
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0001 015A 
; 0001 015B      return Dat;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0001 015C }
;PCODE: $0000018F VOL: 0
