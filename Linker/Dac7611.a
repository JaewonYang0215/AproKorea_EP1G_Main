;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <string.h>
;#include <delay.h>
;#include <float.h>
;
;#include "DAC7611.h"
;#include "../I2cLib/I2CLib.h"
;
;//const BYTE VolArray[15] = {4, 8, 14, 21, 30, 40, 50, 65, 82, 93, 110, 124, 138, 150, 160};
;//const BYTE VolArray[15] = {5, 8, 14, 20, 30, 40, 53, 65, 82, 93, 110, 124, 138, 150, 160};
;
;                           //20 30 40  50  60  70  80  90  100 110 120  130  140  150  160   2020-10-21
;const BYTE VolArray[15] =   {5, 11, 18, 26, 40, 51, 63, 74, 85, 93, 109, 124, 138, 150, 160};
;
;void DAC7611_init( void )
; 0002 0011 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0012    DAC7611_Write( 0 );
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0002 0013 }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;void DAC7611_WriteVoltage( int data )
; 0002 0016 {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0002 0017    WORD temp;
; 0002 0018    int mRefVol;
; 0002 0019 
; 0002 001A    if(data < 20 )
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;	data -> Y+4
;	temp -> R16,R17
;	mRefVol -> R18,R19
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0002 001B    {
; 0002 001C       mRefVol = 0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0002 001D    }
; 0002 001E    else
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0002 001F    {
; 0002 0020       mRefVol =  (data-20)/10;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0002 0021       mRefVol = VolArray[mRefVol];
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0002 0022    }
;PCODE: $00000028 VOL: 0
; 0002 0023 
; 0002 0024    temp = (WORD)(4095.0f/160.0f* (float)mRefVol);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0002 0025 
; 0002 0026    DAC7611_Write( temp );
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0002 0027 }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;
;void DAC7611_Write( WORD data )
; 0002 002A {
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0002 002B      int i;
; 0002 002C      WORD temp;
; 0002 002D 
; 0002 002E      HIGH_LD;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;	data -> Y+4
;	i -> R16,R17
;	temp -> R18,R19
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0002 002F      HIGH_SCLK;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0002 0030      LOW_CS;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0002 0031 
; 0002 0032      for( i=0; i<12; i++ )
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0002 0033      {
; 0002 0034         /* right shift */
; 0002 0035        temp = data & ( 0x800>>i );
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0002 0036 
; 0002 0037        if( temp ) HIGH_SDA;    /* high data  */
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0002 0038        else       LOW_SDA;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0002 0039 
; 0002 003A        i2c_delay();
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0002 003B        LOW_SCLK;          /* high clock */
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0002 003C        i2c_delay();
;PCODE: $0000005A VOL: 0
; 0002 003D        HIGH_SCLK;         /* low clock    */
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0002 003E        i2c_delay();
;PCODE: $0000005D VOL: 0
; 0002 003F      }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0002 0040 
; 0002 0041      HIGH_CS;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0002 0042 
; 0002 0043      LOW_LD;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0002 0044      i2c_delay();
;PCODE: $00000067 VOL: 0
; 0002 0045      HIGH_LD;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0002 0046 }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
